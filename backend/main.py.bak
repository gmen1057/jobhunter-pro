from fastapi import FastAPI, Depends, HTTPException, status, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel
from typing import Optional, List
import os
from dotenv import load_dotenv
from loguru import logger
import httpx

from database import get_db, engine
from models import Base, User, UserToken, UserProfessionalRole
from sqlalchemy.orm import Session
from services.token_service import TokenService
load_dotenv()

# Create tables
Base.metadata.create_all(bind=engine)

app = FastAPI(
    title="JobHunter Pro API",
    description="Автоматизированная система поиска работы",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://jhunterpro.ru", "http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

security = HTTPBearer()

# Models
class User(BaseModel):
    id: int
    email: str
    name: str
    hh_token: Optional[str] = None

class VacancyFilter(BaseModel):
    text: Optional[str] = None
    area: Optional[int] = None
    salary_from: Optional[int] = None
    salary_to: Optional[int] = None
    experience: Optional[str] = None
    employment: Optional[str] = None

class Vacancy(BaseModel):
    id: str
    name: str
    employer_name: str
    salary_from: Optional[int]
    salary_to: Optional[int]
    currency: Optional[str]
    area_name: str
    published_at: str
    url: str

# Routes
@app.get("/")
async def root():
    return {"message": "JobHunter Pro API"}

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

@app.post("/auth/hh")
async def hh_auth():
    """Инициализация OAuth авторизации с HeadHunter"""
    client_id = os.getenv("HH_CLIENT_ID")
    # Redirect URI должен точно совпадать с указанным в настройках приложения на hh.ru
    # Если в настройках указан https://localhost:8080/auth/callback, используйте его
    # Иначе обновите настройки приложения на hh.ru
    redirect_uri = os.getenv("HH_REDIRECT_URI", "https://jhunterpro.ru/api/auth/callback")
    auth_url = f"https://hh.ru/oauth/authorize?response_type=code&client_id={client_id}&redirect_uri={redirect_uri}"
    return {"auth_url": auth_url}

@app.get("/auth/callback")
async def auth_callback(request: Request, code: str = None, db: Session = Depends(get_db)):
    """Callback для получения токена от HeadHunter и сохранения в БД"""
    from services.hh_client import HHClient
    from datetime import datetime, timedelta, timezone
    import uuid
    
    logger.info(f"Auth callback received. URL: {request.url}")
    logger.info(f"Query params: {request.query_params}")
    
    # Проверка наличия кода авторизации
    if not code:
        logger.error("No code parameter received")
        error_url = "https://jhunterpro.ru/?error=no_code"
        from fastapi.responses import RedirectResponse
        return RedirectResponse(url=error_url)
    
    logger.info(f"Auth callback received with code: {code[:10]}...")
    
    try:
        hh_client = HHClient()
        redirect_uri = os.getenv("HH_REDIRECT_URI", "https://jhunterpro.ru/api/auth/callback")
        logger.info(f"Using redirect_uri: {redirect_uri}")
        
        # Обмениваем код на токен
        logger.info("Exchanging code for token...")
        token_data = await hh_client.get_access_token(code, redirect_uri)
        logger.info(f"Token received successfully: {token_data.get('token_type', 'unknown')} token")
        
        # Получаем информацию о пользователе из HH API
        logger.info("Getting user info from HH API...")
        hh_client.access_token = token_data['access_token']
        user_info = await hh_client.get_me()
        logger.info(f"User info received: {user_info.get('email', 'unknown')}")
        
        # Проверяем существующего пользователя или создаем нового
        user = db.query(User).filter(User.hh_user_id == user_info['id']).first()
        
        if not user:
            # Создаем нового пользователя
            logger.info(f"Creating new user for HH ID: {user_info['id']}")
            user = User(
                public_id=str(uuid.uuid4()),
                hh_user_id=user_info['id'],
                email=user_info['email'],
                first_name=user_info.get('first_name'),
                last_name=user_info.get('last_name'),
                middle_name=user_info.get('middle_name'),
                created_at=datetime.now(timezone.utc),
                updated_at=datetime.now(timezone.utc)
            )
            db.add(user)
            db.commit()
            db.refresh(user)
            logger.info(f"New user created with public_id: {user.public_id}")
        else:
            # Обновляем информацию существующего пользователя
            logger.info(f"Updating existing user with public_id: {user.public_id}")
            user.email = user_info['email']
            user.first_name = user_info.get('first_name')
            user.last_name = user_info.get('last_name')
            user.middle_name = user_info.get('middle_name')
            user.updated_at = datetime.now(timezone.utc)
            db.commit()
        
        # Сохраняем токены через TokenService
        logger.info("Saving tokens to database...")
        token_service = TokenService(db)
        await token_service.save_initial_tokens(
            user_id=user.id,
            access_token=token_data['access_token'],
            refresh_token=token_data['refresh_token'],
            expires_in=token_data['expires_in']
        )
        logger.info("Tokens saved successfully")
        
        # Получаем и сохраняем professional roles из резюме
        try:
            logger.info("Fetching user resumes for professional roles...")
            resumes = await hh_client.get_resumes()
            
            # Удаляем старые роли
            db.query(UserProfessionalRole).filter(UserProfessionalRole.user_id == user.id).delete()
            
            # Сохраняем новые роли
            for resume in resumes.get('items', []):
                for i, spec in enumerate(resume.get('specialization', [])):
                    role = UserProfessionalRole(
                        public_id=str(uuid.uuid4()),
                        user_id=user.id,
                        role_id=spec['id'],
                        role_name=spec['name'],
                        is_primary=(i == 0)  # Первая роль считается основной
                    )
                    db.add(role)
            
            db.commit()
            logger.info(f"Professional roles saved for user {user.public_id}")
        except Exception as e:
            logger.warning(f"Failed to fetch professional roles: {e}")
            # Не прерываем процесс авторизации из-за ошибки с ролями
        
        # Перенаправляем на фронтенд с public_id пользователя
        frontend_url = f"https://jhunterpro.ru/?user_id={user.public_id}"
        logger.info(f"Redirecting to frontend with user_id: {user.public_id}")
        from fastapi.responses import RedirectResponse
        return RedirectResponse(url=frontend_url)
        
    except Exception as e:
        logger.error(f"Auth callback error: {e}")
        logger.error(f"Error type: {type(e).__name__}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        error_url = "https://jhunterpro.ru/?error=auth_failed"
        from fastapi.responses import RedirectResponse
        return RedirectResponse(url=error_url)

    
    logger.info(f"Auth callback received with code: {code[:10]}...")
    
    try:
        hh_client = HHClient()
        redirect_uri = os.getenv("HH_REDIRECT_URI", "https://jhunterpro.ru/api/auth/callback")
        logger.info(f"Using redirect_uri: {redirect_uri}")
        
        # Обмениваем код на токен
        logger.info("Exchanging code for token...")
        token_data = await hh_client.get_access_token(code, redirect_uri)
        logger.info(f"Token received successfully: {token_data.get('token_type', 'unknown')} token")
        
        # В реальном приложении здесь нужно:
        # 1. Сохранить токен в БД с привязкой к пользователю
        # 2. Создать JWT токен для нашего приложения
        # 3. Перенаправить на фронтенд с токеном
        
        # Временное решение - перенаправляем с токеном в URL
        frontend_url = f"https://jhunterpro.ru/?auth_token={token_data['access_token']}"
        logger.info(f"Redirecting to frontend: {frontend_url[:50]}...")
        from fastapi.responses import RedirectResponse
        return RedirectResponse(url=frontend_url)
        
    except Exception as e:
        logger.error(f"Auth callback error: {e}")
        logger.error(f"Error type: {type(e).__name__}")
        error_url = "https://jhunterpro.ru/?error=auth_failed"
        from fastapi.responses import RedirectResponse
        return RedirectResponse(url=error_url)

@app.get("/vacancies/search")
async def search_vacancies(
    text: Optional[str] = None,
    area: Optional[int] = None,
    salary: Optional[int] = None,
    experience: Optional[str] = None,
    employment: Optional[str] = None,
    page: int = 0,
    per_page: int = 20,
    smart_search: bool = True,
    request: Request = None,
    db: Session = Depends(get_db)
):
    """Умный поиск вакансий с автоподстановкой professional_roles"""
    from services.hh_client import HHClient
    from services.token_service import TokenService
    from sqlalchemy import text
    
    try:
        # Получаем токен если есть
        token = request.headers.get("authorization", "").replace("Bearer ", "") if request else None
        
        # Если включен умный поиск и есть токен пользователя
        professional_roles = None
        if smart_search and token:
            try:
                # Простая проверка - токен это user_id
                user_id = int(token)
                
                # Получаем professional_roles пользователя из БД
                roles_result = db.execute(
                    text("SELECT role_id FROM user_professional_roles WHERE user_id = :user_id"),
                    {"user_id": user_id}
                ).fetchall()
                
                if roles_result:
                    professional_roles = [str(row[0]) for row in roles_result]
                    logger.info(f"Smart search: using {len(professional_roles)} professional roles for user {user_id}")
                
            except (ValueError, Exception) as e:
                logger.warning(f"Smart search failed, falling back to regular search: {e}")
        
        # Если есть авторизация, получаем валидный HH токен
        hh_token = None
        if token:
            try:
                user_id = int(token)
                token_service = TokenService(db)
                hh_token = await token_service.get_valid_token(user_id)
            except:
                pass
                
        hh_client = HHClient(access_token=hh_token)
        
        # Выполняем поиск с умными фильтрами
        vacancies_data = await hh_client.search_vacancies(
            text=text,
            area=area,
            salary=salary,
            experience=experience,
            employment=employment,
            page=page,
            per_page=per_page,
            professional_roles=professional_roles  # Добавляем умные фильтры
        )
        
        # Добавляем информацию об умном поиске в ответ
        vacancies_data["smart_search_applied"] = professional_roles is not None
        if professional_roles:
            vacancies_data["professional_roles_used"] = professional_roles
            
        return vacancies_data
        
    except Exception as e:
        logger.error(f"Error searching vacancies: {e}")
        raise HTTPException(status_code=500, detail=str(e))

        return vacancies_data
    except Exception as e:
        logger.error(f"Error searching vacancies: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/user/profile")
async def get_user_profile(request: Request):
    """Получение профиля пользователя из HeadHunter API"""
    token = request.headers.get("authorization", "").replace("Bearer ", "")
    if not token:
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    try:
        from services.hh_client import HHClient
        hh_client = HHClient(access_token=token)
        user_data = await hh_client.get_me()
        
        # Формируем полное имя
        first_name = user_data.get("first_name", "")
        last_name = user_data.get("last_name", "") 
        middle_name = user_data.get("middle_name", "")
        
        full_name = f"{last_name} {first_name}".strip()
        if middle_name:
            full_name = f"{last_name} {first_name} {middle_name}".strip()
        
        return {
            "id": user_data.get("id"),
            "email": user_data.get("email"),
            "name": f"{first_name} {last_name}".strip(),
            "full_name": full_name,
            "first_name": first_name,
            "last_name": last_name,
            "middle_name": middle_name,
            "hh_id": user_data.get("id"),
            "hh_token": "token_exists"
        }
    except Exception as e:
        logger.error(f"Error getting user profile: {e}")
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)
# Резюме endpoints

# Resume endpoints with database integration
@app.get("/resumes/mine")
async def get_my_resumes(current_user: dict = Depends(get_current_user), db: Session = Depends(get_db)):
    """Получить список резюме пользователя с использованием БД токенов"""
    from services.token_service import TokenService
    from services.hh_client import HHClient
    
    try:
        # Получаем валидный токен из БД
        token_service = TokenService(db)
        valid_token = await token_service.get_valid_token(current_user["id"])
        
        if not valid_token:
            raise HTTPException(status_code=401, detail="HH token expired, please re-authenticate")
        
        # Получаем резюме от HH API
        hh_client = HHClient(access_token=valid_token)
        resumes = await hh_client.get_resumes()
        
        # Сохраняем professional_roles в БД для умного поиска
        await _save_professional_roles(db, current_user["id"], resumes)
        
        return {"items": resumes, "found": len(resumes)}
        
    except Exception as e:
        logger.error(f"Error getting resumes: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/resumes/{resume_id}")
async def get_resume_details(resume_id: str, current_user: dict = Depends(get_current_user), db: Session = Depends(get_db)):
    """Получить детали конкретного резюме"""
    from services.token_service import TokenService
    from services.hh_client import HHClient
    import httpx
    
    try:
        # Получаем валидный токен из БД
        token_service = TokenService(db)
        valid_token = await token_service.get_valid_token(current_user["id"])
        
        if not valid_token:
            raise HTTPException(status_code=401, detail="HH token expired, please re-authenticate")
        
        # Получаем детали резюме от HH API
        hh_client = HHClient(access_token=valid_token)
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"https://api.hh.ru/resumes/{resume_id}",
                headers=hh_client._get_headers()
            )
            response.raise_for_status()
            return response.json()
            
    except Exception as e:
        logger.error(f"Error getting resume details: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def _save_professional_roles(db: Session, user_id: int, resumes: list):
    """Сохранить professional_roles из резюме в БД для умного поиска"""
    from sqlalchemy import text
    
    try:
        # Удаляем старые роли пользователя
        db.execute(
            text("DELETE FROM user_professional_roles WHERE user_id = :user_id"),
            {"user_id": user_id}
        )
        
        # Собираем все роли из всех резюме
        all_roles = set()
        for resume in resumes:
            professional_roles = resume.get("professional_roles", [])
            for role in professional_roles:
                all_roles.add((role["id"], role["name"]))
        
        # Сохраняем уникальные роли
        for role_id, role_name in all_roles:
            db.execute(
                text("""
                INSERT INTO user_professional_roles (user_id, role_id, role_name, is_primary)
                VALUES (:user_id, :role_id, :role_name, :is_primary)
                """),
                {
                    "user_id": user_id,
                    "role_id": role_id,
                    "role_name": role_name,
                    "is_primary": len(all_roles) == 1  # Если роль одна - делаем её основной
                }
            )
        
        db.commit()
        logger.info(f"Saved {len(all_roles)} professional roles for user {user_id}")
        
    except Exception as e:
        db.rollback()
        logger.error(f"Error saving professional roles: {e}")
