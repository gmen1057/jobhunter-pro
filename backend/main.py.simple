from fastapi import FastAPI, Depends, HTTPException, status, Request, Header
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import RedirectResponse
from sqlalchemy.orm import Session
from typing import Optional
import os
from dotenv import load_dotenv
from loguru import logger

# Local imports
from database import get_db, engine
from models import Base, User, UserToken, UserProfessionalRole
from services.token_service import TokenService

load_dotenv()

# Create tables
Base.metadata.create_all(bind=engine)

app = FastAPI(
    title="JobHunter Pro API",
    description="Автоматизированная система поиска работы",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Auth dependency
async def get_current_user(authorization: str = Header(None), db: Session = Depends(get_db)):
    if not authorization:
        raise HTTPException(status_code=401, detail="Authorization header missing")
    
    user = db.query(User).filter(User.public_id == authorization).first()
    if not user:
        raise HTTPException(status_code=401, detail="Invalid user credentials")
    
    return user

@app.get("/")
async def root():
    return {"message": "JobHunter Pro API"}

@app.get("/health")
async def health_check():
    return {"status": "ok"}

@app.post("/auth/hh")
async def hh_auth():
    """Инициализация OAuth авторизации с HeadHunter"""
    client_id = os.getenv("HH_CLIENT_ID")
    redirect_uri = os.getenv("HH_REDIRECT_URI", "https://jhunterpro.ru/api/auth/callback")
    auth_url = f"https://hh.ru/oauth/authorize?response_type=code&client_id={client_id}&redirect_uri={redirect_uri}"
    return {"auth_url": auth_url}

@app.get("/auth/callback")
async def auth_callback(
    request: Request, 
    code: str = None,
    error: str = None,
    db: Session = Depends(get_db)
):
    """Простой callback для получения токена от HeadHunter"""
    from services.hh_client import HHClient
    
    logger.info(f"Auth callback received. URL: {request.url}")
    
    if error:
        logger.error(f"OAuth error: {error}")
        return RedirectResponse(url=f"https://jhunterpro.ru/?error={error}")
    
    if not code:
        logger.error("No code parameter received")
        return RedirectResponse(url="https://jhunterpro.ru/?error=no_code")
    
    try:
        hh_client = HHClient()
        redirect_uri = os.getenv("HH_REDIRECT_URI", "https://jhunterpro.ru/api/auth/callback")
        
        # Обмениваем код на токен
        token_data = await hh_client.get_access_token(code, redirect_uri)
        logger.info("Token received successfully")
        
        # Получаем данные пользователя
        hh_client.access_token = token_data["access_token"]
        user_data = await hh_client.get_me()
        email = user_data.get("email", "no email")
        logger.info(f"User data received: {email}")
        
        # Get or Create пользователя в БД
        hh_user_id = str(user_data["id"])
        user = db.query(User).filter(User.hh_user_id == hh_user_id).first()
        
        if user:
            logger.info(f"Found existing user: {user.id}")
            login_status = "logged_in"
        else:
            logger.info(f"Creating new user for HH user: {hh_user_id}")
            user = User(
                hh_user_id=hh_user_id,
                email=user_data.get("email"),
                first_name=user_data.get("first_name"),
                last_name=user_data.get("last_name"),
                middle_name=user_data.get("middle_name")
            )
            db.add(user)
            login_status = "created"
        
        db.commit()
        db.refresh(user)
        logger.info(f"User saved with public_id: {user.public_id}")
        
        # Сохраняем токены через TokenService
        token_service = TokenService(db)
        await token_service.save_initial_tokens(
            user_id=user.id,
            access_token=token_data["access_token"],
            refresh_token=token_data["refresh_token"],
            expires_in=token_data.get("expires_in", 86400)
        )
        logger.info(f"Tokens saved for user {user.id}")
        
        # Перенаправляем на фронтенд с public_id
        frontend_url = f"https://jhunterpro.ru/?user_id={user.public_id}&status={login_status}"
        logger.info(f"Redirecting to frontend with user_id: {user.public_id}")
        return RedirectResponse(url=frontend_url)
        
    except Exception as e:
        logger.error(f"Auth callback error: {e}", exc_info=True)
        return RedirectResponse(url="https://jhunterpro.ru/?error=auth_failed")

@app.get("/vacancies/search")
async def search_vacancies(
    text: Optional[str] = None,
    page: int = 0
):
    """Простой поиск вакансий (мок-данные)"""
    mock_vacancies = [
        {
            "id": "123456",
            "name": "Python Developer",
            "employer_name": "TechCorp",
            "salary_from": 150000,
            "salary_to": 250000,
            "currency": "RUR",
            "area_name": "Москва",
            "published_at": "2024-01-15T10:00:00",
            "url": "https://hh.ru/vacancy/123456"
        }
    ]
    return {"items": mock_vacancies, "found": 1, "page": page}

@app.get("/user/profile")
async def get_user_profile(current_user: User = Depends(get_current_user)):
    """Получение профиля пользователя"""
    return {
        "id": current_user.id,
        "public_id": str(current_user.public_id),
        "email": current_user.email,
        "first_name": current_user.first_name,
        "last_name": current_user.last_name,
        "middle_name": current_user.middle_name
    }

@app.get("/resumes/mine")
async def get_my_resumes(current_user: User = Depends(get_current_user)):
    """Получение резюме пользователя (мок-данные)"""
    return {"items": [], "found": 0}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)
